(function(){const origLog=console.log;origLog("CONSOLE CAPTURE SCRIPT LOADED");origLog("Window access check:",typeof window!=="undefined"?"OK":"FAILED");origLog("Fetch API check:",typeof fetch!=="undefined"?"OK":"FAILED");if(window.__consoleCaptureMcp){origLog("Console capture already active");return}window.__consoleCaptureMcp=true;origLog("Console capture activated");origLog("Testing direct connection to MCP server...");fetch("http://localhost:3333/test",{method:"GET"}).then((response=>{origLog("Direct connection successful:",response.status);initializeDirectCapture()})).catch((err=>{origLog("Direct connection failed:",err.message)}));function initializeDirectCapture(){const sessionId=Date.now().toString();function sendDirectLog(type,content){try{fetch(serverUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:type,content:content,url:window.location.href,timestamp:(new Date).toISOString()})}).catch((error=>{const failedLogs=JSON.parse(localStorage.getItem("failedLogs")||"[]");failedLogs.push({type:type,content:content,url:window.location.href,timestamp:(new Date).toISOString()});localStorage.setItem("failedLogs",JSON.stringify(failedLogs.slice(-100)))}))}catch(error){}}window.__sendMcpLog=function(type,...args){sendDirectLog(type,args)};const buttons=document.querySelectorAll("button");buttons.forEach(((button,index)=>{button.addEventListener("click",(function(){sendDirectLog("log",[`Button clicked: ${button.textContent||button.id||"Button "+index}`])}))}));if(!document.getElementById("test-log")){const testButton=document.createElement("button");testButton.textContent="Test Direct Log";testButton.style.position="fixed";testButton.style.bottom="10px";testButton.style.right="10px";testButton.style.zIndex="9999";testButton.style.padding="10px";testButton.style.background="#4CAF50";testButton.style.color="white";testButton.style.border="none";testButton.style.borderRadius="4px";testButton.style.cursor="pointer";testButton.addEventListener("click",(function(){sendDirectLog("log",["Test log from injected button",(new Date).toISOString()]);sendDirectLog("warn",["Test warning from injected button"]);sendDirectLog("error",["Test error from injected button"]);alert("Test logs sent directly! Check the MCP server.")}));try{document.body.appendChild(testButton)}catch(e){origLog("Could not inject test button due to CSP restrictions:",e)}}const mcpTestButton=document.getElementById("test-log");if(mcpTestButton){origLog("Found MCP test button, adding direct logging");mcpTestButton.addEventListener("click",(function(){sendDirectLog("log",["Test log from MCP button click",(new Date).toISOString()]);sendDirectLog("warn",["Test warning from MCP button click"]);sendDirectLog("error",["Test error from MCP button click"])}))}const observer=new MutationObserver((function(mutations){mutations.forEach((function(mutation){if(mutation.type==="childList"&&mutation.addedNodes.length>0){mutation.addedNodes.forEach((function(node){if(node.nodeType===1){const buttons=node.querySelectorAll?node.querySelectorAll("button"):[];buttons.forEach(((button,index)=>{button.addEventListener("click",(function(){sendDirectLog("log",[`New button clicked: ${button.textContent||button.id||"Button "+index}`])}))}))}}))}}))}));observer.observe(document.body,{childList:true,subtree:true});let isCheckingConsole=false;let consoleOpenState=false;function checkConsoleState(){if(isCheckingConsole)return;isCheckingConsole=true;const startTime=performance.now();const endTime=performance.now();const newState=endTime-startTime>20;if(newState!==consoleOpenState){consoleOpenState=newState;sendDirectLog("log",[`Console is now ${consoleOpenState?"open":"closed"}`])}isCheckingConsole=false}setInterval(checkConsoleState,5e3);window.addEventListener("error",(function(event){sendDirectLog("error",["Uncaught error:",event.message,`at ${event.filename}:${event.lineno}:${event.colno}`])}));window.addEventListener("unhandledrejection",(function(event){sendDirectLog("error",["Unhandled promise rejection:",event.reason?event.reason.message||String(event.reason):"Unknown reason"])}));sendDirectLog("log",["ConsoleSpy initialized and working"]);window.mcpLog=function(message){sendDirectLog("log",[message]);return"Log sent to MCP server"};window.mcpWarn=function(message){sendDirectLog("warn",[message]);return"Warning sent to MCP server"};window.mcpError=function(message){sendDirectLog("error",[message]);return"Error sent to MCP server"};origLog("Manual logging available via window.mcpLog(), window.mcpWarn(), and window.mcpError()");origLog("Direct capture system activated");function retryFailedLogs(){const failedLogs=JSON.parse(localStorage.getItem("failedLogs")||"[]");if(failedLogs.length===0)return;const logsToRetry=[...failedLogs];localStorage.setItem("failedLogs","[]");logsToRetry.forEach((log=>{fetch(serverUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(log)}).catch((()=>{const currentFailedLogs=JSON.parse(localStorage.getItem("failedLogs")||"[]");currentFailedLogs.push(log);localStorage.setItem("failedLogs",JSON.stringify(currentFailedLogs))}))}))}retryFailedLogs();setInterval(retryFailedLogs,6e4)}})();